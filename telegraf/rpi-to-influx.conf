# --------------------------------------------------- Defaults ---------------------------------------------

# Read CPU metrics
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false

# Gather metrics from disks
[[inputs.disk]]
  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# Read metrics about disk IO by device
[[inputs.diskio]]

# Read HDD temp metric from the hddtemp daemon
#[[inputs.hddtemp]]

# Read metrics about system load & uptime
[[inputs.system]]
  ## Uncomment to remove deprecated metrics.
  fielddrop = ["uptime_format"]

# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration

# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  # no configuratiion

# Read metrics about the IRQ
[[inputs.interrupts]]
   cpu_as_tag = true

#[[inputs.linux_sysctl_fs]]

# Gather metrics about network interfaces
[[inputs.net]]

# Collect TCP connections state and UDP socket counts
[[inputs.netstat]]
  # no configuration

# Gather metrics from /proc/net/* files
[[inputs.nstat]]

# ----------------------------------------------------- Top processes (default) ----------------------------------

[[inputs.procstat]]
  pattern = "."
  pid_tag = true
  pid_finder = "native"
  fieldpass = [
      "num_threads",
      "cpu_usage",
      "memory_rss",
  ]

[[processors.topk]]
  # see: https://github.com/influxdata/telegraf/blob/1.7.0/docs/CONFIGURATION.md#processor-configuration
  namepass = ["*procstat*"]
  fields = [
      "num_threads",
      "cpu_usage",
      "memory_rss",
  ]

[[processors.regex]]
  namepass = ["*procstat*"]
  [[processors.regex.tags]]
    key = "process_name"
    pattern = "^(.{60}).*"
    replacement = "${1}..."

# ------------------------------------------------------ Raspberry Pi ---------------------------------------------

# Read RPi CPU temperature
[[inputs.exec]]
  commands = [ '''sed -e 's/^\([0-9]\{2\}\)\(.*\)$/\1.\2/' /sys/class/thermal/thermal_zone0/temp''' ]
  name_override = "rpi_cpu_temp"
  data_format = "grok"
  grok_patterns = ["%{NUMBER:value:float}"]

# Read RPi GPU temperature
[[inputs.exec]]
  commands = ["/usr/bin/vcgencmd measure_temp"]
  name_override = "rpi_gpu_temp"
  data_format = "grok"
  grok_patterns = ["%{NUMBER:value:float}"]

# Available frequencies: https://github.com/torvalds/linux/blob/master/drivers/clk/bcm/clk-bcm2835.c
# Read RPi CPU clock freq
[[inputs.exec]]
  commands = ["/usr/bin/vcgencmd measure_clock arm"]
  name_override = "cpu_clock"
  data_format = "grok"
  grok_patterns = ["=%{NUMBER:arm:int}"]

# Read RPi h264 freq
#[[inputs.exec]]
#  commands = [ "/usr/bin/vcgencmd measure_clock h264" ]
#  name_override = "rpi_frequency"
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:h264:int}"]

# Read RPi uart freq
#[[inputs.exec]]
#  commands = [ "/usr/bin/vcgencmd measure_clock uart" ]
#  name_override = "rpi_frequency"
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:uart:int}"]

# Read RPi pwm freq
#[[inputs.exec]]
#  commands = [ "/usr/bin/vcgencmd measure_clock pwm" ]
#  name_override = "rpi_frequency"
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:pwm:int}"]

# Read RPi CPU voltage
[[inputs.exec]]
  commands = ["/usr/bin/vcgencmd measure_volts core"]
  name_override = "rpi_volts"
  data_format = "grok"
  grok_patterns = ["%{NUMBER:core:float}"]

# Read RPi SDRAM_C voltage
#[[inputs.exec]]
#  commands = ["/usr/bin/vcgencmd measure_volts sdram_c"]
#  name_override = "rpi_volts"
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:sdramc:float}"]

# Read RPi SDRAM_I voltage
#[[inputs.exec]]
#  commands = ["/usr/bin/vcgencmd measure_volts sdram_i"]
#  name_override = "rpi_volts"
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:sdrami:float}"]

# Read RPi SDRAM_P voltage
#[[inputs.exec]]
#  commands = ["/usr/bin/vcgencmd measure_volts sdram_p"]
#  name_override = "rpi_volts"

# Read RPi ARM mem
#[[inputs.exec]]
#  commands = [ "/usr/bin/vcgencmd get_mem arm" ]
#  name_override = "rpi_mem"
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:arm:int}"]

# Read RPi GPU mem
#[[inputs.exec]]
#  commands = [ "/usr/bin/vcgencmd get_mem gpu" ]
#  name_override = "rpi_mem"
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:arm:int}"]

# Read RPi malloc
#[[inputs.exec]]
#  commands = [ "/usr/bin/vcgencmd get_mem malloc" ]
#  name_override = "rpi_mem"
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:malloc:int}"]

# Read RPi total malloc
#[[inputs.exec]]
#  commands = [ "/usr/bin/vcgencmd get_mem malloc_total" ]
#  name_override = "rpi_mem"
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:malloc_total:int}"]

# Read RPi reloc
#[[inputs.exec]]
#  commands = [ "/usr/bin/vcgencmd get_mem reloc" ]
#  name_override = "rpi_mem"
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:reloc:int}"]

# Read RPi total reloc
#[[inputs.exec]]
#  commands = [ "/usr/bin/vcgencmd get_mem reloc_total" ]
#  name_override = "rpi_mem"
#  data_format = "grok"
#  grok_patterns = ["%{NUMBER:reloc_total:int}"]

# Read RPi throttled state
[[inputs.exec]]
  commands = ["/etc/telegraf/get-throttled.sh"]
  name_override = "rpi_throttling"
  data_format = "grok"
  grok_patterns = ["uv=%{NUMBER:now_undervolted:int} uvb=%{NUMBER:since_boot_undervolted:int} afc=%{NUMBER:now_arm_frequency_capped:int} afcb=%{NUMBER:since_boot_arm_frequency_capped:int} tr=%{NUMBER:now_throttled:int} trb=%{NUMBER:since_boot_throttled:int} str=%{NUMBER:now_soft_temp_limit_reached:int} strb=%{NUMBER:since_boot_soft_temp_limit_reached:int}"]
